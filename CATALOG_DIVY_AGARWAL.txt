CATALOG ASSIGNMENT PROBLEM SOLUTION


#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>

using namespace std;

// Function to convert a number from a given base to decimal
int baseToDecimal(const string& number, int base) {
    int decimalNumber = 0;
    int power = 1;
    for (int i = number.length() - 1; i >= 0; --i) {
        decimalNumber += (number[i] - '0') * power;
        power *= base;
    }
    return decimalNumber;
}

// Function to calculate the constant term of the polynomial using Lagrange Interpolation
double calculateConstantTerm(const vector<pair<int, int>>& points) {
    double constantTerm = 0.0;
    int numPoints = points.size();

    for (int i = 0; i < numPoints; i++) {
        double term = points[i].second;  // y_i
        for (int j = 0; j < numPoints; j++) {
            if (i != j) {
                term *= (0.0 - points[j].first) / (points[i].first - points[j].first);
            }
        }
        constantTerm += term;
    }

    return constantTerm;
}


int main() {
    // Input example: x, base, and value in that base
    //TEST-CASE1
    
    vector<pair<int, pair<int, string>>>  test_case1 = {
        {1, {10, "4"}},
        {2, {2, "111"}},
        {3, {10, "12"}},
        {6, {4, "213"}}
    };

int requiredPoints1 = 3;  


// Vector to store the decoded (x, y) points
    vector<pair<int, int>> adecodedPoints;

    // Extract and decode the (x, y) points
    for (const auto& entry : test_case1) {
        int x = entry.first;
        int base = entry.second.first;
        string yValue = entry.second.second;
        int y = baseToDecimal(yValue, base);  // Decode y value
        adecodedPoints.push_back({x, y});
    }

    // Sort points based on x values and select the first requiredPoints points
    sort(adecodedPoints.begin(), adecodedPoints.end());
    adecodedPoints.resize(requiredPoints1);

    // Calculate the constant term (c) using Lagrange Interpolation
    double constantTerm1 = calculateConstantTerm(adecodedPoints);

    // Output the constant term (c)
    cout << "The constant term (c) for test case 1 is: " << constantTerm1 << endl;
    
    
    //TEST-CASE2
    
    vector<pair<int, pair<int, string>>> test_case2 = {
        {1, {10, "28735619723837"}},
        {2, {16, "1A228867F0CA"}},
        {3, {12, "32811A4AA0B7B"}},
        {4, {11, "917978721331A"}},
        {5, {16, "1A22886782E1"}},
        {6, {10, "28735619654702"}},
        {7, {14, "71AB5070CC4B"}},
        {8, {9, "122662581541670"}},
        {9, {8, "642121030037605"}}
         
    };
    


    int requiredPoints2 = 6;  // Minimum number of points required to solve the polynomial

    
    
     // Vector to store the decoded (x, y) points
    vector<pair<int, int>> bdecodedPoints;

    // Extract and decode the (x, y) points
    for (const auto& entry : test_case2) {
        int x = entry.first;
        int base = entry.second.first;
        string yValue = entry.second.second;
        int y = baseToDecimal(yValue, base);  // Decode y value
        bdecodedPoints.push_back({x, y});
    }

    // Sort points based on x values and select the first requiredPoints points
    sort(bdecodedPoints.begin(), bdecodedPoints.end());
    bdecodedPoints.resize(requiredPoints2);

    // Calculate the constant term (c) using Lagrange Interpolation
    double constantTerm2 = calculateConstantTerm(bdecodedPoints);

    // Output the constant term (c)
    cout << "The constant term (c) for test case 2 is: " << constantTerm2 << endl;


    return 0;
}


OUTPUT......................................................................................................................................................


The constant term (c) for test case 1 is: 3
The constant term (c) for test case 2 is: 3.04733e+09